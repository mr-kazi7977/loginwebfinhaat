{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { routes } from 'src/app/consts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/auth.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"src/app/service/token-storage.service\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/progress-bar\";\nimport * as i13 from \"@angular/material/checkbox\";\n\nfunction LoginFormComponent_mat_progress_bar_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 6);\n  }\n}\n\nfunction LoginFormComponent_mat_form_field_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 7)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"User Id\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 8);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginFormComponent_mat_form_field_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 7)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 9);\n    i0.ɵɵelementStart(4, \"mat-hint\");\n    i0.ɵɵtext(5, \"Enter Password here\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginFormComponent_mat_form_field_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 7)(1, \"mat-label\");\n    i0.ɵɵtext(2, \" Registered Mobile Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵelementStart(4, \"mat-icon\", 11);\n    i0.ɵɵtext(5, \"mobile_screen_share\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-hint\");\n    i0.ɵɵtext(7, \"Enter 10 Digit Number\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginFormComponent_mat_form_field_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 7)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"OTP\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 12);\n    i0.ɵɵelementStart(4, \"mat-icon\", 11);\n    i0.ɵɵtext(5, \"vpn_key\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-hint\");\n    i0.ɵɵtext(7, \"Enter OTP \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginFormComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function LoginFormComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.sendOTP());\n    });\n    i0.ɵɵtext(1, \"Send OTP\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginFormComponent_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function LoginFormComponent_button_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.verifyOTP());\n    });\n    i0.ɵɵtext(1, \"Verify\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginFormComponent = /*#__PURE__*/(() => {\n  class LoginFormComponent {\n    constructor(router, authService, toastrService, tokenStorage, SpinnerService) {\n      this.router = router;\n      this.authService = authService;\n      this.toastrService = toastrService;\n      this.tokenStorage = tokenStorage;\n      this.SpinnerService = SpinnerService;\n      this.sendLoginForm = new EventEmitter();\n      this.showOTP = false;\n      this.loading = false;\n      this.routers = routes;\n      this.loginModel = new loginModel();\n      this.cred = true;\n      this.mobilelogin = true;\n      this.request = {};\n      this.finlogtype = false;\n    }\n\n    ngOnInit() {\n      this.loginForm = new FormGroup({\n        mobile: new FormControl(null, [Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]),\n        otp: new FormControl(null, null),\n        userid: new FormControl(null, null),\n        password: new FormControl(null, null),\n        logtype: new FormControl('partner')\n      });\n    }\n\n    sendOTP() {\n      //  console.log(this.loginForm.value);\n      // localStorage.setItem(\"logtype\", this.loginForm.value.logtype)\n      //localStorage.setItem(\"userid\", this.loginForm.value.userid)\n      // if (this.loginForm.valid) {\n      if (this.loginForm.value.logtype == 'partner') {\n        this.loading = true;\n        this.tokenStorage.removeToken();\n        this.SpinnerService.show();\n        this.authService.get('auth/sendotp/' + this.loginForm.value.mobile).subscribe(data => {\n          this.SpinnerService.hide();\n          this.loading = false;\n\n          if (data && data.errorCode == 100) {\n            this.toastrService.success(data.errorMessage, 'Message');\n            this.showOTP = true;\n            this.loginForm.controls['otp'].setValidators([Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{6}$\")]);\n            this.loginForm.controls['otp'].updateValueAndValidity();\n          } else {\n            this.toastrService.error(data.errorMessage, 'Message');\n          }\n        });\n      } // }\n\n\n      if (this.loginForm.value.logtype == 'finhaat') {\n        // console.log(\"logtype finhaat\", this.loginForm.value.logtype);\n        this.tokenStorage.removeToken();\n        if (!this.mobilelogin) this.loginModel.mobilelogin = \"Y\";else this.loginModel.mobilelogin = \"N\";\n        this.loginModel.userId = this.loginForm.value.userid;\n\n        if (this.loginForm.value.logtype == 'finhaat') {\n          this.loginModel.password = this.loginForm.value.password;\n          this.loginModel.usertype = \"FN\";\n        }\n\n        this.loginModel.retailapp = \"Y\";\n        this.loading = true; // console.log(this.loginModel)\n\n        localStorage.removeItem(\"logtype\");\n        localStorage.removeItem(\"userid\");\n        this.tokenStorage.removeToken();\n        this.authService.pospost('auth/login', this.loginModel).subscribe(data => {\n          this.loading = false; // console.log(\"finhaat data\",data);\n\n          if (data.errorCode == 100) {\n            //  localStorage.setItem(\"logtype\", this.loginForm.value.logtype)\n            //  localStorage.setItem(\"userid\", this.loginForm.value.userid)\n            this.toastrService.success(\"Otp Send Succesfully\", 'Message');\n            this.showOTP = true; // console.log(data.mobile);\n\n            this.loginForm.patchValue({\n              mobile: data.mobile\n            });\n            this.cred = true; // this.loginForm.controls['otp'].setValidators([Validators.required,Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{6}$\")]);\n            // this.loginForm.controls['otp'].updateValueAndValidity();\n          } else {\n            // alert(\"enter valid credentials\")\n            this.toastrService.error(\"Please Enter Valid Credentials\", 'Message');\n            this.cred = false;\n          }\n        });\n      } // }\n\n    }\n\n    verifyOTP() {\n      // if (this.loginForm.valid) {\n      this.loading = true; // console.log();\n\n      this.authService.post('auth/verifyLoginOTP', this.loginForm.value).subscribe(data => {\n        // console.log(\"log data\", data);\n        this.loading = false;\n\n        if (data && data.errorCode == 100) {\n          this.toastrService.success(data.errorMessage, 'Message');\n          this.showOTP = true;\n\n          if (data[\"loggedIn\"]) {\n            this.tokenStorage.saveToken(data[\"jwttoken\"]);\n            this.request.mobile = data.mobile; // this.authService.post('registration/getUserInfo',this.request).subscribe({\n            //     next: data => {\n\n            if (this.loginForm.value.logtype == 'partner') {\n              this.router.navigate([this.routers.CDOT]).then();\n            } else {\n              this.router.navigate([this.routers.POLICYDEATIL]).then();\n            } //     }\n            // });\n\n          } else {\n            this.showOTP = false;\n            this.toastrService.error(\"Error While Login\", 'Message');\n            this.loginForm.controls['otp'].clearValidators();\n            this.loginForm.controls['otp'].updateValueAndValidity();\n            this.loginForm.patchValue({\n              otp: null\n            });\n          }\n        } else {\n          this.showOTP = false;\n          this.toastrService.error(data.errorMessage, 'Message');\n          this.loginForm.controls['otp'].clearValidators();\n          this.loginForm.controls['otp'].updateValueAndValidity();\n          this.loginForm.patchValue({\n            otp: null\n          });\n        }\n      }); // }\n    }\n\n    finhaatlog() {\n      this.finlogtype = !this.finlogtype;\n\n      if (this.finlogtype == true) {\n        this.loginForm.patchValue({\n          logtype: 'finhaat'\n        });\n      }\n\n      if (this.finlogtype == false) {\n        this.loginForm.patchValue({\n          logtype: 'partner'\n        });\n      }\n    }\n\n  }\n\n  LoginFormComponent.ɵfac = function LoginFormComponent_Factory(t) {\n    return new (t || LoginFormComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.TokenStorageService), i0.ɵɵdirectiveInject(i5.NgxSpinnerService));\n  };\n\n  LoginFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginFormComponent,\n    selectors: [[\"app-login-form\"]],\n    outputs: {\n      sendLoginForm: \"sendLoginForm\"\n    },\n    decls: 13,\n    vars: 8,\n    consts: [[1, \"form\", 3, \"formGroup\"], [\"mode\", \"indeterminate\", 4, \"ngIf\"], [\"appearance\", \"outline\", \"class\", \"input-width\", 4, \"ngIf\"], [1, \"example-margin\", 3, \"click\"], [1, \"form-actions\"], [\"class\", \"form-actions__login\", \"mat-raised-button\", \"\", \"class\", \"button1\", \"type\", \"submit\", 3, \"click\", 4, \"ngIf\"], [\"mode\", \"indeterminate\"], [\"appearance\", \"outline\", 1, \"input-width\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"User Id\", \"formControlName\", \"userid\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"type\", \"tel\", \"matInput\", \"\", \"placeholder\", \"Mobile Number\", \"maxlength\", \"10\", \"formControlName\", \"mobile\"], [\"matSuffix\", \"\"], [\"matInput\", \"\", \"placeholder\", \"OTP\", \"formControlName\", \"otp\", \"maxlength\", \"6\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"button1\", 3, \"click\"]],\n    template: function LoginFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵtemplate(1, LoginFormComponent_mat_progress_bar_1_Template, 1, 0, \"mat-progress-bar\", 1);\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵtemplate(3, LoginFormComponent_mat_form_field_3_Template, 4, 0, \"mat-form-field\", 2);\n        i0.ɵɵtemplate(4, LoginFormComponent_mat_form_field_4_Template, 6, 0, \"mat-form-field\", 2);\n        i0.ɵɵtemplate(5, LoginFormComponent_mat_form_field_5_Template, 8, 0, \"mat-form-field\", 2);\n        i0.ɵɵtemplate(6, LoginFormComponent_mat_form_field_6_Template, 8, 0, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(7, \"mat-checkbox\", 3);\n        i0.ɵɵlistener(\"click\", function LoginFormComponent_Template_mat_checkbox_click_7_listener() {\n          return ctx.finhaatlog();\n        });\n        i0.ɵɵtext(8, \"Finhaat User\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelementStart(10, \"div\", 4);\n        i0.ɵɵtemplate(11, LoginFormComponent_button_11_Template, 2, 0, \"button\", 5);\n        i0.ɵɵtemplate(12, LoginFormComponent_button_12_Template, 2, 0, \"button\", 5);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.finlogtype);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.finlogtype);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.finlogtype);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showOTP);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.showOTP);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showOTP);\n      }\n    },\n    dependencies: [i6.NgIf, i7.MatButton, i8.MatFormField, i8.MatHint, i8.MatLabel, i8.MatSuffix, i9.MatInput, i10.ɵNgNoValidate, i10.DefaultValueAccessor, i10.NgControlStatus, i10.NgControlStatusGroup, i10.MaxLengthValidator, i10.FormGroupDirective, i10.FormControlName, i11.MatIcon, i12.MatProgressBar, i13.MatCheckbox],\n    styles: [\".form[_ngcontent-%COMP%]{width:100%}.form__input[_ngcontent-%COMP%]{width:100%;margin-top:6px}.form-actions[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center}.form-actions__login[_ngcontent-%COMP%]{margin-right:10px}.form-actions__forget[_ngcontent-%COMP%]{font-size:12px;font-weight:400;color:#536dfe}.input-width[_ngcontent-%COMP%]{width:100%}.button1[_ngcontent-%COMP%]{background-color:#2da44a;border:none;color:#fff;padding:8px 30px;text-align:center;text-decoration:none;display:inline-block;font-size:16px;margin:4px 2px;transition-duration:1s;cursor:pointer}.button1[_ngcontent-%COMP%]:hover{background-color:#2c3b97;color:#fff}\"]\n  });\n  return LoginFormComponent;\n})();\nexport class loginModel {}","map":null,"metadata":{},"sourceType":"module"}