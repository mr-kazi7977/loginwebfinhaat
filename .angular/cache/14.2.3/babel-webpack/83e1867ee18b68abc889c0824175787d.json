{"ast":null,"code":"import { InjectionToken, ElementRef, Renderer2, Optional, Self, Input, HostBinding, HostListener, Component, Inject, Pipe, NgModule } from '@angular/core';\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * Optional token to provide custom configuration to the module\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/forms';\nconst NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken('ngx-mat-file-input.config');\n/**\n * Provide additional configuration to dynamically customize the module injection\n */\n\nclass FileInputConfig {}\n/**\n * The files to be uploaded\n */\n\n\nclass FileInput {\n  constructor(_files, delimiter = ', ') {\n    this._files = _files;\n    this.delimiter = delimiter;\n    this._fileNames = (this._files || []).map(f => f.name).join(delimiter);\n  }\n\n  get files() {\n    return this._files || [];\n  }\n\n  get fileNames() {\n    return this._fileNames;\n  }\n\n} // Boilerplate for applying mixins to FileInput\n\n/** @docs-private */\n\n\nclass FileInputBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n/**\n * Allows to use a custom ErrorStateMatcher with the file-input component\n */\n\n\nconst FileInputMixinBase = mixinErrorState(FileInputBase);\nvar FileInputComponent_1;\nlet FileInputComponent = FileInputComponent_1 = class FileInputComponent extends FileInputMixinBase {\n  /**\n   * @see https://angular.io/api/forms/ControlValueAccessor\n   */\n  constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.fm = fm;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this.ngControl = ngControl;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.focused = false;\n    this.controlType = 'file-input';\n    this.autofilled = false;\n    this._required = false;\n    this.accept = null;\n    this.id = `ngx-mat-file-input-${FileInputComponent_1.nextId++}`;\n    this.describedBy = '';\n\n    this._onChange = _ => {};\n\n    this._onTouched = () => {};\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  setDescribedByIds(ids) {\n    this.describedBy = ids.join(' ');\n  }\n\n  get value() {\n    return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\n  }\n\n  set value(fileInput) {\n    if (fileInput) {\n      this.writeValue(fileInput);\n      this.stateChanges.next();\n    }\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the current input has files\n   */\n\n\n  get empty() {\n    return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\n  }\n\n  get shouldLabelFloat() {\n    return this.focused || !this.empty || this.valuePlaceholder !== undefined;\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  get isDisabled() {\n    return this.disabled;\n  }\n\n  get disabled() {\n    return this._elementRef.nativeElement.disabled;\n  }\n\n  set disabled(dis) {\n    this.setDisabledState(coerceBooleanProperty(dis));\n    this.stateChanges.next();\n  }\n\n  onContainerClick(event) {\n    if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').focus();\n\n      this.focused = true;\n      this.open();\n    }\n  }\n\n  get fileNames() {\n    return this.value ? this.value.fileNames : this.valuePlaceholder;\n  }\n\n  writeValue(obj) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);\n  }\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Remove all files from the file input component\n   * @param [event] optional event that may have triggered the clear action\n   */\n\n\n  clear(event) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this.value = new FileInput([]);\n    this._elementRef.nativeElement.querySelector('input').value = null;\n\n    this._onChange(this.value);\n  }\n\n  change(event) {\n    const fileList = event.target.files;\n    const fileArray = [];\n\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        fileArray.push(fileList[i]);\n      }\n    }\n\n    this.value = new FileInput(fileArray);\n\n    this._onChange(this.value);\n  }\n\n  blur() {\n    this.focused = false;\n\n    this._onTouched();\n  }\n\n  setDisabledState(isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  ngOnInit() {\n    this.multiple = coerceBooleanProperty(this.multiple);\n  }\n\n  open() {\n    if (!this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').click();\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n};\n\nFileInputComponent.ɵfac = function FileInputComponent_Factory(t) {\n  return new (t || FileInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8));\n};\n\nFileInputComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FileInputComponent,\n  selectors: [[\"ngx-mat-file-input\"]],\n  hostVars: 6,\n  hostBindings: function FileInputComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"change\", function FileInputComponent_change_HostBindingHandler($event) {\n        return ctx.change($event);\n      })(\"focusout\", function FileInputComponent_focusout_HostBindingHandler() {\n        return ctx.blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"aria-describedby\", ctx.describedBy);\n      ɵngcc0.ɵɵclassProp(\"mat-form-field-should-float\", ctx.shouldLabelFloat)(\"file-input-disabled\", ctx.isDisabled);\n    }\n  },\n  inputs: {\n    autofilled: \"autofilled\",\n    accept: \"accept\",\n    value: \"value\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    disabled: \"disabled\",\n    multiple: \"multiple\",\n    valuePlaceholder: \"valuePlaceholder\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: FileInputComponent_1\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 4,\n  consts: [[\"type\", \"file\"], [\"input\", \"\"], [1, \"filename\", 3, \"title\"]],\n  template: function FileInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"input\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"multiple\", ctx.multiple ? \"\" : null)(\"accept\", ctx.accept);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"title\", ctx.fileNames);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.fileNames);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\"]\n});\nFileInputComponent.nextId = 0;\n\nFileInputComponent.ctorParameters = () => [{\n  type: FocusMonitor\n}, {\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n__decorate([Input(), __metadata(\"design:type\", Object)], FileInputComponent.prototype, \"autofilled\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], FileInputComponent.prototype, \"valuePlaceholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], FileInputComponent.prototype, \"multiple\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], FileInputComponent.prototype, \"accept\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", ErrorStateMatcher)], FileInputComponent.prototype, \"errorStateMatcher\", void 0);\n\n__decorate([HostBinding(), __metadata(\"design:type\", Object)], FileInputComponent.prototype, \"id\", void 0);\n\n__decorate([HostBinding('attr.aria-describedby'), __metadata(\"design:type\", Object)], FileInputComponent.prototype, \"describedBy\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], FileInputComponent.prototype, \"value\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], FileInputComponent.prototype, \"placeholder\", null);\n\n__decorate([HostBinding('class.mat-form-field-should-float'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FileInputComponent.prototype, \"shouldLabelFloat\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], FileInputComponent.prototype, \"required\", null);\n\n__decorate([HostBinding('class.file-input-disabled'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FileInputComponent.prototype, \"isDisabled\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], FileInputComponent.prototype, \"disabled\", null);\n\n__decorate([HostListener('change', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], FileInputComponent.prototype, \"change\", null);\n\n__decorate([HostListener('focusout'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], FileInputComponent.prototype, \"blur\", null);\n\nFileInputComponent = FileInputComponent_1 = __decorate([__param(4, Optional()), __param(4, Self()), __param(5, Optional()), __param(6, Optional()), __metadata(\"design:paramtypes\", [FocusMonitor, ElementRef, Renderer2, ErrorStateMatcher, NgControl, NgForm, FormGroupDirective])], FileInputComponent);\nlet ByteFormatPipe = /*#__PURE__*/(() => {\n  let ByteFormatPipe = class ByteFormatPipe {\n    constructor(config) {\n      this.config = config;\n      this.unit = config ? config.sizeUnit : 'Byte';\n    }\n\n    transform(value, args) {\n      if (parseInt(value, 10) >= 0) {\n        value = this.formatBytes(+value, +args);\n      }\n\n      return value;\n    }\n\n    formatBytes(bytes, decimals) {\n      if (bytes === 0) {\n        return '0 ' + this.unit;\n      }\n\n      const B = this.unit.charAt(0);\n      const k = 1024;\n      const dm = decimals || 2;\n      const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n\n  };\n\n  ByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) {\n    return new (t || ByteFormatPipe)(ɵngcc0.ɵɵdirectiveInject(NGX_MAT_FILE_INPUT_CONFIG, 24));\n  };\n\n  ByteFormatPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"byteFormat\",\n    type: ByteFormatPipe,\n    pure: true\n  });\n  ByteFormatPipe = __decorate([__param(0, Optional()), __param(0, Inject(NGX_MAT_FILE_INPUT_CONFIG)), __metadata(\"design:paramtypes\", [FileInputConfig])], ByteFormatPipe);\n  return ByteFormatPipe;\n})();\nlet MaterialFileInputModule = /*#__PURE__*/(() => {\n  let MaterialFileInputModule = class MaterialFileInputModule {};\n\n  MaterialFileInputModule.ɵfac = function MaterialFileInputModule_Factory(t) {\n    return new (t || MaterialFileInputModule)();\n  };\n\n  MaterialFileInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MaterialFileInputModule\n  });\n  MaterialFileInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [FocusMonitor]\n  });\n  return MaterialFileInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialFileInputModule, {\n    declarations: [FileInputComponent, ByteFormatPipe],\n    exports: [FileInputComponent, ByteFormatPipe]\n  });\n})();\n\nvar FileValidator;\n\n(function (FileValidator) {\n  /**\n   * Function to control content of files\n   *\n   * @param bytes max number of bytes allowed\n   *\n   * @returns\n   */\n  function maxContentSize(bytes) {\n    return control => {\n      const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\n      const condition = bytes >= size;\n      return condition ? null : {\n        maxContentSize: {\n          actualSize: size,\n          maxSize: bytes\n        }\n      };\n    };\n  }\n\n  FileValidator.maxContentSize = maxContentSize;\n  /**\n   *\n   * @description Handles allowed file types by controlling whether some specific extensions matches with the uploaded file type\n   * @export\n   * @param {string[]} extensions\n   * @returns {ValidatorFn}\n   */\n\n  function allowedExtensions(extensions) {\n    return control => {\n      const allowed = control && control.value && control.value.files.every(file => {\n        const fileNameSplit = file.name.split('.');\n        const extension = fileNameSplit[fileNameSplit.length - 1];\n        const foundIndex = extensions.indexOf(extension);\n        return foundIndex !== -1;\n      });\n      return allowed ? null : {\n        allowedExtensions: extensions\n      };\n    };\n  }\n\n  FileValidator.allowedExtensions = allowedExtensions;\n})(FileValidator || (FileValidator = {}));\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ByteFormatPipe, FileInput, FileInputComponent, FileInputConfig, FileValidator, MaterialFileInputModule, NGX_MAT_FILE_INPUT_CONFIG, FileInputBase as ɵa, FileInputMixinBase as ɵb }; //# sourceMappingURL=ngx-mat-file-input.js.map","map":null,"metadata":{},"sourceType":"module"}