{"ast":null,"code":"import { ComponentPortal } from '@angular/cdk/portal';\nimport { defer, NEVER } from 'rxjs';\nimport { finalize, share } from 'rxjs/operators';\nimport { SpinnerOverlayComponent } from '../pages/spinner-overlay/spinner-overlay.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let SpinnerOverlayService = /*#__PURE__*/(() => {\n  class SpinnerOverlayService {\n    constructor(overlay) {\n      this.overlay = overlay;\n      this.overlayRef = undefined;\n      this.spinner$ = defer(() => {\n        this.show();\n        return NEVER.pipe(finalize(() => {\n          this.hide();\n        }));\n      }).pipe(share());\n    }\n\n    show() {\n      // console.log('SpinnerOverlayService ~ show spinner');\n      // Hack avoiding `ExpressionChangedAfterItHasBeenCheckedError` error\n      Promise.resolve(null).then(() => {\n        this.overlayRef = this.overlay.create({\n          positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\n          hasBackdrop: true\n        });\n        this.overlayRef.attach(new ComponentPortal(SpinnerOverlayComponent));\n      });\n    }\n\n    hide() {\n      // console.log('SpinnerOverlayService ~ hide spinner');\n      this.overlayRef.detach();\n      this.overlayRef = undefined;\n    }\n\n  }\n\n  SpinnerOverlayService.ɵfac = function SpinnerOverlayService_Factory(t) {\n    return new (t || SpinnerOverlayService)(i0.ɵɵinject(i1.Overlay));\n  };\n\n  SpinnerOverlayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpinnerOverlayService,\n    factory: SpinnerOverlayService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpinnerOverlayService;\n})();","map":null,"metadata":{},"sourceType":"module"}