{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/token-storage.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, tokenService) {\n      this.router = router;\n      this.tokenService = tokenService;\n    }\n\n    canActivate(route, state) {\n      return true; //if (!this.tokenService.isAuthenticated()) {\n      //this.router.navigate(['/login']);\n      // return false;\n      // }\n      // const currentUser = this.tokenService.getUser();\n      // if (currentUser) {\n      // return true;\n      // }\n      //this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n      //return false;\n    } // I determine if the current route-request is part of a page refresh.\n\n\n    isPageRefresh() {\n      // If the router has yet to establish a single navigation, it means that this\n      // navigation is the first attempt to reconcile the application state with the\n      // URL state. Meaning, this is a page refresh.\n      return !this.router.navigated;\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TokenStorageService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}